{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"0NAMA,SAASA,EAAOC,GAEd,OAAQ,yBAAQC,UAAY,SAASC,QAAWF,EAAME,QAA9C,cAAyDF,EAAMG,MAA/D,O,IAIFC,E,2KAGSC,GAAI,IAAD,OACd,OAAO,cAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GACzBH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAKlD,OACE,gCAEE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA1BTC,IAAMC,WAiCpBC,E,kDAEJ,WAAYX,GACX,IAAD,8BACE,cAAMA,IACDY,MAAM,CACTC,QAAS,CAAC,CAACN,QAAQO,MAAM,GAAGC,KAAK,QACjCC,SAAQ,EACRC,WAAW,GALf,E,mDAQOC,GAELZ,KAAKa,SAAS,CAACF,WAAWC,EAC1BF,QAASE,EAAK,IAAK,M,kCAGTb,GAEV,IAAMQ,EAAQP,KAAKM,MAAMC,QAAQO,MAAM,EAAEd,KAAKM,MAAMK,WAAW,GAEzDV,EADQM,EAAQA,EAAQQ,OAAO,GACbd,QAAQa,QAE7BE,EAAgBf,IAAUA,EAAQF,KAIrCE,EAAQF,GAAGC,KAAKM,MAAMI,QAAW,IAAM,IACvCV,KAAKa,SAAS,CAACN,QAAQA,EAAQU,OAAO,CAAC,CAAChB,QAAQA,KAChDU,WAAWJ,EAAQQ,OACnBL,SAAUV,KAAKM,MAAMI,a,+BAEb,IAiBJQ,EAjBG,OACDX,EAAQP,KAAKM,MAAMC,QACnBY,EAAQZ,EAAQP,KAAKM,MAAMK,YAC3BS,EAAOJ,EAAgBG,EAAQlB,SAE/BoB,EAAMd,EAAQe,KAAI,SAACV,EAAMW,GAC7B,IAAMC,EAAOD,EACb,eAAiBA,EACjB,mBACA,OACA,6BACE,wBAAQ3B,QAAW,kBAAK,EAAK6B,OAAOF,IAApC,SAA4CC,KADnCD,MAkBb,OAREL,EAFCE,EAEO,WAAWA,EAGV,iBAAiBpB,KAAKM,MAAMI,QAAU,IAAM,KAMrD,sBAAKf,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CAAOG,QAAWkB,EAAQlB,QAC1BL,QAAS,SAACG,GAAD,OAAO,EAAK2B,YAAY3B,QAEnC,sBAAKJ,UAAU,YAAf,UACE,8BAAOuB,IACP,6BAAMG,c,GApEGlB,IAAMC,WA4EzB,SAASY,EAAgBf,GAYvB,IAVA,IAAM0B,EAAM,CACV,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAEC5B,EAAG,EAAGA,EAAE4B,EAAMZ,OAAQhB,IAC9B,CAAC,IAAD,cACiB4B,EAAM5B,GADvB,GACS6B,EADT,KACYC,EADZ,KACcC,EADd,KAEE,GAAG7B,EAAQ2B,IAAI3B,EAAQ2B,KAAK3B,EAAQ4B,IAAI5B,EAAQ2B,KAAK3B,EAAQ6B,GAE3D,OAAO7B,EAAQ2B,GAGnB,OAAO,KAMTG,IAASC,OACP,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.0c228b7c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\nfunction Square(props)\n{\n  return (<button className = \"square\" onClick = {props.onClick}> {props.value} </button>);\n}\n\n  \n  class Board extends React.Component {\n   \n\n    renderSquare(i) {\n      return <Square value={this.props.squares[i]}\n                      onClick={() => this.props.onClick(i)}\n          />;\n    }\n  \n    render() {\n      return (\n        <div>\n        \n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n\n    constructor(props)\n    {\n      super(props);\n      this.state={\n        history: [{squares:Array(9).fill(null),}],\n        xIsNext:true,\n        stepNumber:0,\n      };\n    }\n    jumpTo(step)\n    {\n      this.setState({stepNumber:step, \n      xIsNext:(step%2)===0,});\n    }\n\n    handleClick(i)\n    {\n      const history=this.state.history.slice(0,this.state.stepNumber+1);\n      const current=history[history.length-1];\n      const squares = current.squares.slice();\n\n      if(calculateWinner(squares)||squares[i])\n      {\n        return;\n      }\n      squares[i]=this.state.xIsNext  ? 'X' : 'O';\n      this.setState({history:history.concat([{squares:squares,}]), \n      stepNumber:history.length,\n      xIsNext: !this.state.xIsNext, });\n    }\n    render() {\n      const history=this.state.history;\n      const current=history[this.state.stepNumber];\n      const winner=calculateWinner(current.squares);\n\n      const moves=history.map((step, move) => {\n        const desc = move ?\n        \"Go to move #\" + move :\n        \"Go to game start\";\n        return (\n        <li key = {move}> \n          <button onClick = {()=> this.jumpTo(move)}>{desc}</button>\n          </li>\n          );\n      });\n   \n\n      let status;\n      if(winner)\n      {\n        status= \"Winner: \"+winner;\n      }\n      else{\n        status = \"Next player: \"+(this.state.xIsNext ? \"X\" : \"O\");\n      }\n\n\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board squares = {current.squares}\n            onClick={(i) => this.handleClick(i)}/>\n          </div>\n          <div className=\"game-info\">\n            <div>{ status}</div>\n            <ol>{ moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n    \n\n  function calculateWinner(squares)\n  {\n    const lines=[\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [0,4,8],\n      [2,4,6],\n    ];\n    for(let i =0; i<lines.length; i++)\n    {\n      const [a, b,c]=lines[i];\n      if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c])\n      {\n        return squares[a];\n      }\n    }\n    return null;\n\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  \n    "],"sourceRoot":""}